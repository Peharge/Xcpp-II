import sys
import numpy as np
import sounddevice as sd
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QHBoxLayout
from PyQt5.QtCore import QTimer, Qt
from PyQt5.QtGui import QPainter, QColor, QPen

class WaveformWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.data = np.zeros(2048)
        self.setFixedHeight(400)  # Set the fixed height to 400px

    def update_waveform(self, data):
        if len(data) != len(self.data):
            self.data = np.zeros(len(self.data))
        else:
            self.data = data
        self.update()

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        pen = QPen(QColor(255, 255, 255))
        pen.setWidth(2)
        painter.setPen(pen)

        width = self.size().width()
        height = self.size().height()
        middle = height / 2

        step = width / len(self.data)
        for i in range(1, len(self.data)):
            x1 = int((i - 1) * step)
            y1 = int(middle - self.data[i - 1] * middle)
            x2 = int(i * step)
            y2 = int(middle - self.data[i] * middle)
            painter.drawLine(x1, y1, x2, y2)

class VoiceAnimationWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Sprachanimation")
        self.setGeometry(460, 340, 1000, 500)  # Increase the height to accommodate the label
        self.initUI()
        self.setWindowFlags(Qt.Window | Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)

        self.audio_data = np.zeros(2048)
        self.stream = sd.InputStream(channels=1, callback=self.audio_callback, blocksize=2048, samplerate=44100)
        self.stream.start()

        self.timer = QTimer()
        self.timer.timeout.connect(self.update_display)
        self.timer.start(30)

    def initUI(self):
        self.container = QWidget(self)
        self.setCentralWidget(self.container)

        self.layout = QVBoxLayout(self.container)
        self.waveform_widget = WaveformWidget()
        self.layout.addWidget(self.waveform_widget)

        self.decibel_label = QLabel("Lautstärke: 0 dB", self)
        self.decibel_label.setFixedWidth(250)  # Set fixed width to 50px
        self.decibel_label.setStyleSheet("""
            color: black;
            font-size: 16px;
            background-color: rgba(255, 255, 255, 150);
            border-radius: 10px;
            padding: 10px;
        """)
        self.decibel_label.setAlignment(Qt.AlignCenter)  # Center the text horizontally and vertically

        # Create a QHBoxLayout to center the label horizontally
        label_layout = QHBoxLayout()
        label_layout.addStretch()
        label_layout.addWidget(self.decibel_label)
        label_layout.addStretch()

        # Add the label layout to the main layout
        self.layout.addLayout(label_layout)

    def audio_callback(self, indata, frames, time, status):
        if status:
            print(status)

        # Berechne den maximalen Absolutwert der Amplitude im Signal
        amplitude = np.max(np.abs(indata))

        # Setze einen höheren Referenzwert, um die Dezibel-Werte zu erhöhen
        reference = 0.01  # Diesen Wert kannst du weiter anpassen

        # Optional: Verstärke das Signal, falls es zu schwach ist
        scaled_amplitude = amplitude * 10  # Beispiel: Verstärkung des Signals

        if scaled_amplitude > 0:
            self.current_decibel = 20 * np.log10(scaled_amplitude / reference)
        else:
            self.current_decibel = -np.inf

        self.audio_data = np.squeeze(indata)

    def update_display(self):
        self.waveform_widget.update_waveform(self.audio_data)
        # Update the label with the current decibel level
        if self.current_decibel == -np.inf:
            decibel_text = "Lautstärke: < 0 dB"
        else:
            decibel_text = f"Lautstärke: {self.current_decibel:.2f} dB"
        self.decibel_label.setText(decibel_text)

    def closeEvent(self, event):
        self.timer.stop()
        self.stream.stop()
        self.stream.close()
        super().closeEvent(event)



if __name__ == "__main__":
    app = QApplication(sys.argv)
    mainWin = VoiceAnimationWindow()
    mainWin.show()
    sys.exit(app.exec_())
